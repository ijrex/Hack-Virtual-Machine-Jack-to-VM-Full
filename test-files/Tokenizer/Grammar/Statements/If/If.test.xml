<class>
	<keyword> class </keyword>
	<identifier>
		<name> Main </name>
		<category> CLASS_DEC </category>
		<runningIndex> -1 </runningIndex>
	</identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> main </name>
			<category> SUBROUTINE_DEC </category>
			<runningIndex> -1 </runningIndex>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<symbolEntry>
					<name> a </name>
					<type> int </type>
					<key> 0 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> , </symbol>
				<symbolEntry>
					<name> b </name>
					<type> int </type>
					<key> 1 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> a </name>
								<category> VAR </category>
								<runningIndex> 0 </runningIndex>
							</identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier>
								<name> b </name>
								<category> VAR </category>
								<runningIndex> 1 </runningIndex>
							</identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<returnStatement>
							<keyword> return </keyword>
							<expression>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</returnStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> a </name>
								<category> VAR </category>
								<runningIndex> 0 </runningIndex>
							</identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier>
								<name> b </name>
								<category> VAR </category>
								<runningIndex> 1 </runningIndex>
							</identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<returnStatement>
							<keyword> return </keyword>
							<expression>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</returnStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<returnStatement>
							<keyword> return </keyword>
							<expression>
								<term>
									<keyword> false </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</returnStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> abc </name>
								<category> SUBROUTINE </category>
								<runningIndex> -1 </runningIndex>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<returnStatement>
							<keyword> return </keyword>
							<expression>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</returnStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> def </name>
								<category> SUBROUTINE </category>
								<runningIndex> -1 </runningIndex>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<returnStatement>
							<keyword> return </keyword>
							<expression>
								<term>
									<keyword> false </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</returnStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
