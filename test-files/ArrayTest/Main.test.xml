<class>
	<keyword> class </keyword>
	<identifier>
		<name> Main </name>
		<category> CLASS_DEC </category>
		<runningIndex> -1 </runningIndex>
	</identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> main </name>
			<category> SUBROUTINE_DEC </category>
			<runningIndex> -1 </runningIndex>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier>
					<name> Array </name>
					<category> SYMBOL_DEC </category>
					<runningIndex> -1 </runningIndex>
				</identifier>
				<symbolEntry>
					<name> a </name>
					<type> Array </type>
					<key> 0 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<symbolEntry>
					<name> length </name>
					<type> int </type>
					<key> 1 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<symbolEntry>
					<name> i </name>
					<type> int </type>
					<key> 2 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> , </symbol>
				<symbolEntry>
					<name> sum </name>
					<type> int </type>
					<key> 3 </key>
					<kind> VAR </kind>
				</symbolEntry>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> length </name>
						<category> VAR </category>
						<runningIndex> 1 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> Keyboard </name>
								<category> CLASS </category>
								<runningIndex> -1 </runningIndex>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> readInt </name>
								<category> SUBROUTINE </category>
								<runningIndex> -1 </runningIndex>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<stringConstant> HOW MANY NUMBERS?  </stringConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> a </name>
						<category> VAR </category>
						<runningIndex> 0 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> Array </name>
								<category> CLASS </category>
								<runningIndex> -1 </runningIndex>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> new </name>
								<category> SUBROUTINE </category>
								<runningIndex> -1 </runningIndex>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier>
											<name> length </name>
											<category> VAR </category>
											<runningIndex> 1 </runningIndex>
										</identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> i </name>
						<category> VAR </category>
						<runningIndex> 2 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> i </name>
								<category> VAR </category>
								<runningIndex> 2 </runningIndex>
							</identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier>
								<name> length </name>
								<category> VAR </category>
								<runningIndex> 1 </runningIndex>
							</identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> a </name>
								<category> VAR </category>
								<runningIndex> 0 </runningIndex>
							</identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier>
										<name> i </name>
										<category> VAR </category>
										<runningIndex> 2 </runningIndex>
									</identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> Keyboard </name>
										<category> CLASS </category>
										<runningIndex> -1 </runningIndex>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> readInt </name>
										<category> SUBROUTINE </category>
										<runningIndex> -1 </runningIndex>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> i </name>
								<category> VAR </category>
								<runningIndex> 2 </runningIndex>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> i </name>
										<category> VAR </category>
										<runningIndex> 2 </runningIndex>
									</identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> i </name>
						<category> VAR </category>
						<runningIndex> 2 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> sum </name>
						<category> VAR </category>
						<runningIndex> 3 </runningIndex>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> i </name>
								<category> VAR </category>
								<runningIndex> 2 </runningIndex>
							</identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier>
								<name> length </name>
								<category> VAR </category>
								<runningIndex> 1 </runningIndex>
							</identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> sum </name>
								<category> VAR </category>
								<runningIndex> 3 </runningIndex>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> sum </name>
										<category> VAR </category>
										<runningIndex> 3 </runningIndex>
									</identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<identifier>
										<name> a </name>
										<category> VAR </category>
										<runningIndex> 0 </runningIndex>
									</identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier>
												<name> i </name>
												<category> VAR </category>
												<runningIndex> 2 </runningIndex>
											</identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> i </name>
								<category> VAR </category>
								<runningIndex> 2 </runningIndex>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> i </name>
										<category> VAR </category>
										<runningIndex> 2 </runningIndex>
									</identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Output </name>
						<category> CLASS </category>
						<runningIndex> -1 </runningIndex>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> printString </name>
						<category> SUBROUTINE </category>
						<runningIndex> -1 </runningIndex>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<stringConstant> THE AVERAGE IS:  </stringConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Output </name>
						<category> CLASS </category>
						<runningIndex> -1 </runningIndex>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> printInt </name>
						<category> SUBROUTINE </category>
						<runningIndex> -1 </runningIndex>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier>
									<name> sum </name>
									<category> VAR </category>
									<runningIndex> 3 </runningIndex>
								</identifier>
							</term>
							<symbol> / </symbol>
							<term>
								<identifier>
									<name> length </name>
									<category> VAR </category>
									<runningIndex> 1 </runningIndex>
								</identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Output </name>
						<category> CLASS </category>
						<runningIndex> -1 </runningIndex>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> println </name>
						<category> SUBROUTINE </category>
						<runningIndex> -1 </runningIndex>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
